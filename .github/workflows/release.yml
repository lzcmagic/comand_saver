name: Release Build

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            cgo: 1
          - goos: linux
            goarch: arm64
            cgo: 1
          - goos: windows
            goarch: amd64
            cgo: 1
          - goos: darwin
            goarch: amd64
            cgo: 0
          - goos: darwin
            goarch: arm64
            cgo: 0

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21.5'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib gcc-mingw-w64 gcc-aarch64-linux-gnu
          sudo apt-get install -y libsqlite3-dev
          if [ "${{ matrix.goarch }}" = "arm64" ]; then
            sudo apt-get install -y libsqlite3-dev:arm64
          fi
          if [ "${{ matrix.goos }}" = "windows" ]; then
            sudo apt-get install -y mingw-w64 mingw-w64-tools
          fi

      - name: Setup Windows SQLite
        if: matrix.goos == 'windows'
        run: |
          wget https://www.sqlite.org/2023/sqlite-amalgamation-3440200.zip
          unzip sqlite-amalgamation-3440200.zip
          sudo cp sqlite-amalgamation-3440200/sqlite3.c sqlite-amalgamation-3440200/sqlite3.h /usr/x86_64-w64-mingw32/include/
          x86_64-w64-mingw32-gcc -c /usr/x86_64-w64-mingw32/include/sqlite3.c -o sqlite3.o
          x86_64-w64-mingw32-ar rcs /usr/x86_64-w64-mingw32/lib/libsqlite3.a sqlite3.o

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: ${{ matrix.cgo }}
        run: |
          mkdir -p dist/cs_${{ matrix.goos }}_${{ matrix.goarch }}
          if [ "${{ matrix.goos }}" = "windows" ]; then
            export CC=x86_64-w64-mingw32-gcc
            export CGO_LDFLAGS="-L/usr/x86_64-w64-mingw32/lib -lsqlite3"
            export CGO_CFLAGS="-I/usr/x86_64-w64-mingw32/include"
            go build -o "dist/cs_${{ matrix.goos }}_${{ matrix.goarch }}/cs.exe" -v
          elif [ "${{ matrix.goos }}" = "linux" ] && [ "${{ matrix.goarch }}" = "arm64" ]; then
            export CC=aarch64-linux-gnu-gcc
            export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig
            export CGO_LDFLAGS="-L/usr/lib/aarch64-linux-gnu"
            export CGO_CFLAGS="-I/usr/include/aarch64-linux-gnu"
            go build -o "dist/cs_${{ matrix.goos }}_${{ matrix.goarch }}/cs" -v
          else
            go build -o "dist/cs_${{ matrix.goos }}_${{ matrix.goarch }}/cs" -v
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: cs_${{ matrix.goos }}_${{ matrix.goarch }}
          path: dist/cs_${{ matrix.goos }}_${{ matrix.goarch }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Create release archives
        run: |
          cd dist
          for dir in */; do
            platform=${dir%/}
            tar -czf "${platform}.tar.gz" "$platform"
          done

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}